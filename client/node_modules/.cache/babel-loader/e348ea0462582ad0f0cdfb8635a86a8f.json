{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\xerographics\\\\client\\\\src\\\\components\\\\pos\\\\ProductsRight.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport React from \"react\";\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport Badge from '@mui/material/Badge';\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\nimport TableCart from \"./TableCart\";\nimport Button from '@mui/material/Button';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport Divider from '@mui/material/Divider';\nimport AddIcon from '@mui/icons-material/Add';\nimport AddCustomerModal from \"../customers/AddCustomerModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProductsRight() {\n  _s();\n\n  const [cartItems, setCartItem] = useState([]);\n  const [productCartId, setCartProductId] = React.useState(-1); //dialog/modal state\n\n  const [dialogOpen, setDialogOpen] = useState(false);\n  let customerId = -1; //dialog open\n\n  const handleClickOpen = () => {\n    setDialogOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setDialogOpen(false);\n  }; //handle click and to cart\n\n\n  const handleClickAddCart = id => {\n    setCartProductId(id);\n    console.log(\"added product: \" + id + \" to cart\");\n    const productSelected = products.filter(product => {\n      return product.id === id;\n    }); // console.log(productSelected)\n    //check if product is already added, if it does, delete and readd with new data\n\n    if (cartItems.length > 0) {\n      for (var i = 0; i < cartItems.length; i++) {\n        if (cartItems[i].product_id === productSelected[0].id) {\n          const newQty = cartItems[i].qty + 1;\n          const cartCopy = cartItems.splice(i, 1); //remove item\n\n          setCartItem(cartCopy); //readd item\n\n          const Item = {\n            product_id: productSelected[0].id,\n            product_name: productSelected[0].product_name,\n            qty: newQty,\n            product_code: productSelected[0].product_code,\n            product_price: productSelected[0].product_price\n          };\n          setCartItem([...cartItems, Item]);\n        } else {\n          //add item\n          const Item = {\n            product_id: productSelected[0].id,\n            product_name: productSelected[0].product_name,\n            qty: 1,\n            product_code: productSelected[0].product_code,\n            product_price: productSelected[0].product_price\n          };\n          setCartItem([...cartItems, Item]);\n        }\n      }\n    } else {\n      const Item = {\n        product_id: productSelected[0].id,\n        product_name: productSelected[0].product_name,\n        qty: 1,\n        product_code: productSelected[0].product_code,\n        product_price: productSelected[0].product_price\n      };\n      setCartItem([...cartItems, Item]);\n    }\n  }; //remove product from cart\n\n\n  const handleDeleteFromCart = id => {\n    const cartCopy = cartItems.filter(cartItem => {\n      // console.log(cartItem.product_id + \" sjsj\")\n      return cartItem.product_id !== id;\n    });\n    setCartItem(cartCopy);\n  }; //style shopping cart badge\n\n\n  const StyledBadge = styled(Badge)(_ref => {\n    let {\n      theme\n    } = _ref;\n    return {\n      '& .MuiBadge-badge': {\n        right: -3,\n        top: 13,\n        border: `2px solid ${theme.palette.background.paper}`,\n        padding: '0 4px'\n      }\n    };\n  }); //customer auto complete\n\n  const handleAutocomplete = (event, newValue) => {\n    if (newValue != null) {\n      console.log(newValue);\n      customerId = newValue.id;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Item, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      spacing: 2,\n      style: {\n        textAlign: 'left'\n      },\n      variant: \"h5\",\n      gutterBottom: true,\n      component: \"div\",\n      children: [\"Shopping Cart\", /*#__PURE__*/_jsxDEV(IconButton, {\n        spacing: 2,\n        \"aria-label\": \"cart\",\n        children: /*#__PURE__*/_jsxDEV(StyledBadge, {\n          badgeContent: cartItems.length,\n          color: \"secondary\",\n          children: /*#__PURE__*/_jsxDEV(ShoppingCartIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      columns: 16,\n      sx: {\n        mb: '20px',\n        mt: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        container: true,\n        style: {\n          width: \"100%\"\n        },\n        component: \"form\",\n        sx: {\n          p: '2px 4px',\n          ml: '20px',\n          mr: '20px',\n          mb: '10px',\n          display: 'flex',\n          alignItems: 'center',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n          id: \"free-solo-demo\",\n          freeSolo: true,\n          options: customers,\n          style: {\n            width: '80%',\n            padding: '2px '\n          },\n          getOptionLabel: customers => customers.customer_name,\n          onChange: handleAutocomplete,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Select customer...\",\n            fullWidth: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          sx: {\n            height: 28,\n            m: 0.5\n          },\n          orientation: \"vertical\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          onClick: handleClickOpen,\n          color: \"primary\",\n          sx: {\n            p: '10px'\n          },\n          \"aria-label\": \"directions\",\n          children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableCart, {\n      style: {\n        maxHeight: 500,\n        overflow: 'auto'\n      },\n      cartItems: cartItems,\n      handleClickAddCart: handleClickAddCart,\n      getDeleteProductIdFromCart: handleDeleteFromCart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        width: \"100%\"\n      },\n      sx: {\n        mt: 4\n      },\n      variant: \"outlined\",\n      children: \"Chekout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AddCustomerModal, {\n      dialogOpen: dialogOpen,\n      handleDialogClose: handleDialogClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ProductsRight, \"p0sUQDWpySYwt2uHbHYRI7SkUNo=\");\n\n_c = ProductsRight;\nexport default ProductsRight;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductsRight\");","map":{"version":3,"sources":["C:/xampp/htdocs/xerographics/client/src/components/pos/ProductsRight.js"],"names":["useState","React","Paper","Grid","Typography","Badge","ShoppingCartIcon","TableCart","Button","Autocomplete","TextField","IconButton","Divider","AddIcon","AddCustomerModal","ProductsRight","cartItems","setCartItem","productCartId","setCartProductId","dialogOpen","setDialogOpen","customerId","handleClickOpen","handleDialogClose","handleClickAddCart","id","console","log","productSelected","products","filter","product","length","i","product_id","newQty","qty","cartCopy","splice","Item","product_name","product_code","product_price","handleDeleteFromCart","cartItem","StyledBadge","styled","theme","right","top","border","palette","background","paper","padding","handleAutocomplete","event","newValue","textAlign","mb","mt","width","p","ml","mr","display","alignItems","customers","customer_name","params","height","m","maxHeight","overflow"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport React from \"react\";\r\nimport Paper from '@mui/material/Paper';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport Badge from '@mui/material/Badge';\r\nimport ShoppingCartIcon from '@mui/icons-material/ShoppingCart';\r\n\r\n\r\nimport TableCart from \"./TableCart\";\r\nimport Button from '@mui/material/Button';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Divider from '@mui/material/Divider';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport AddCustomerModal from \"../customers/AddCustomerModal\";\r\n\r\n\r\nfunction ProductsRight() {\r\n\r\n    const [cartItems, setCartItem] = useState([])\r\n    const [productCartId, setCartProductId] = React.useState(-1);\r\n    //dialog/modal state\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n\r\n    let customerId = -1;\r\n\r\n\r\n\r\n    //dialog open\r\n    const handleClickOpen = () => {\r\n        setDialogOpen(true);\r\n    };\r\n    const handleDialogClose = () => {\r\n        setDialogOpen(false);\r\n    };\r\n\r\n    //handle click and to cart\r\n    const handleClickAddCart = (id) => {\r\n        setCartProductId(id)\r\n        console.log(\"added product: \" + id + \" to cart\")\r\n        const productSelected = products.filter((product) => {\r\n            return product.id === id\r\n        })\r\n\r\n        // console.log(productSelected)\r\n        //check if product is already added, if it does, delete and readd with new data\r\n        if (cartItems.length > 0) {\r\n\r\n            for (var i = 0; i < cartItems.length; i++) {\r\n                if (cartItems[i].product_id === productSelected[0].id) {\r\n\r\n                    const newQty = cartItems[i].qty + 1;\r\n\r\n                    const cartCopy = cartItems.splice(i, 1)//remove item\r\n                    setCartItem(cartCopy);\r\n\r\n                    //readd item\r\n                    const Item = {\r\n                        product_id: productSelected[0].id,\r\n                        product_name: productSelected[0].product_name,\r\n                        qty: newQty,\r\n                        product_code: productSelected[0].product_code,\r\n                        product_price: productSelected[0].product_price\r\n                    }\r\n                    setCartItem([...cartItems, Item]);\r\n\r\n                } else {\r\n                    //add item\r\n                    const Item = {\r\n                        product_id: productSelected[0].id,\r\n                        product_name: productSelected[0].product_name,\r\n                        qty: 1,\r\n                        product_code: productSelected[0].product_code,\r\n                        product_price: productSelected[0].product_price\r\n                    }\r\n                    setCartItem([...cartItems, Item]);\r\n                }\r\n            }\r\n        } else {\r\n            const Item = {\r\n                product_id: productSelected[0].id,\r\n                product_name: productSelected[0].product_name,\r\n                qty: 1,\r\n                product_code: productSelected[0].product_code,\r\n                product_price: productSelected[0].product_price\r\n            }\r\n            setCartItem([...cartItems, Item]);\r\n        }\r\n\r\n\r\n    };\r\n\r\n    //remove product from cart\r\n    const handleDeleteFromCart = (id) => {\r\n\r\n        const cartCopy = cartItems.filter((cartItem) => {\r\n            // console.log(cartItem.product_id + \" sjsj\")\r\n            return cartItem.product_id !== id\r\n        })\r\n        setCartItem(cartCopy);\r\n\r\n    }\r\n\r\n    //style shopping cart badge\r\n    const StyledBadge = styled(Badge)(({ theme }) => ({\r\n        '& .MuiBadge-badge': {\r\n            right: -3,\r\n            top: 13,\r\n            border: `2px solid ${theme.palette.background.paper}`,\r\n            padding: '0 4px',\r\n        },\r\n    }));\r\n\r\n    //customer auto complete\r\n    const handleAutocomplete = (event, newValue) => {\r\n        if (newValue != null) {\r\n            console.log(newValue)\r\n            customerId = newValue.id;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Item>\r\n            <Typography spacing={2} style={{ textAlign: 'left' }} variant=\"h5\" gutterBottom component=\"div\">\r\n                Shopping Cart\r\n                <IconButton spacing={2} aria-label=\"cart\">\r\n                    <StyledBadge badgeContent={cartItems.length} color=\"secondary\">\r\n                        <ShoppingCartIcon />\r\n                    </StyledBadge>\r\n                </IconButton>\r\n            </Typography>\r\n            <Grid container spacing={2} columns={16} sx={{ mb: '20px', mt: '10px' }}>\r\n\r\n                <Paper\r\n                    container\r\n                    style={{ width: \"100%\" }}\r\n                    component=\"form\"\r\n                    sx={{ p: '2px 4px', ml: '20px', mr: '20px', mb: '10px', display: 'flex', alignItems: 'center', width: '100%' }}\r\n                >\r\n\r\n                    <Autocomplete\r\n                        id=\"free-solo-demo\"\r\n                        freeSolo\r\n                        options={customers}\r\n                        style={{ width: '80%', padding: '2px ' }}\r\n                        getOptionLabel={customers => (customers.customer_name)}\r\n                        onChange={handleAutocomplete}\r\n                        renderInput={params => (<TextField\r\n                            {...params}\r\n                            label=\"Select customer...\"\r\n                            fullWidth />\r\n                        )}\r\n                    />\r\n\r\n\r\n                    <Divider sx={{ height: 28, m: 0.5 }} orientation=\"vertical\" />\r\n\r\n                    <IconButton onClick={handleClickOpen} color=\"primary\" sx={{ p: '10px' }} aria-label=\"directions\">\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                </Paper>\r\n\r\n            </Grid>\r\n            <TableCart style={{ maxHeight: 500, overflow: 'auto' }} cartItems={cartItems} handleClickAddCart={handleClickAddCart} getDeleteProductIdFromCart={handleDeleteFromCart} />\r\n\r\n\r\n\r\n            <Button style={{ width: \"100%\" }} sx={{ mt: 4 }} variant=\"outlined\">Chekout</Button>\r\n\r\n            <AddCustomerModal dialogOpen={dialogOpen} handleDialogClose={handleDialogClose} />\r\n\r\n        </Item>\r\n\r\n    );\r\n}\r\n\r\nexport default ProductsRight;"]},"metadata":{},"sourceType":"module"}