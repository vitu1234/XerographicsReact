{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\xerographics\\\\client\\\\src\\\\components\\\\reports\\\\branch\\\\BranchSearchList.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport React from \"react\";\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BranchSearchList(props) {\n  _s();\n\n  const branches_prop = props.branches;\n  const user_type = sessionStorage.getItem('app_type');\n  const app_user_branch = sessionStorage.getItem('branch');\n  let branches;\n\n  if (user_type == '101') {\n    branches = branches_prop;\n  } else {\n    branches = branches_prop.filter(branch => {\n      return branch.id != parseInt(app_user_branch);\n    });\n  }\n\n  const [branchId, setBranchId] = useState(-1);\n  const [branchname, setBranchName] = useState(''); //users auto complete\n\n  const handleAutocomplete = (event, newValue) => {\n    if (newValue != null) {\n      console.log(newValue);\n      setBranchId(newValue.id);\n      props.setBranchId(newValue.id);\n      setBranchName('Branch: ' + newValue.branch_name);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"free-solo-demo\",\n    freeSolo: true,\n    options: branches,\n    getOptionLabel: branches => branches.branch_name,\n    onChange: handleAutocomplete,\n    renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      label: \"Branch sales...\",\n      fullWidth: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 37\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BranchSearchList, \"1R+vowOM35fyBNMs4+HhRvWO50g=\");\n\n_c = BranchSearchList;\nexport default BranchSearchList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BranchSearchList\");","map":{"version":3,"sources":["C:/xampp/htdocs/xerographics/client/src/components/reports/branch/BranchSearchList.js"],"names":["useState","React","Autocomplete","TextField","BranchSearchList","props","branches_prop","branches","user_type","sessionStorage","getItem","app_user_branch","filter","branch","id","parseInt","branchId","setBranchId","branchname","setBranchName","handleAutocomplete","event","newValue","console","log","branch_name","params"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;AAGA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAC7B,QAAMC,aAAa,GAAGD,KAAK,CAACE,QAA5B;AACA,QAAMC,SAAS,GAAGC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAlB;AACA,QAAMC,eAAe,GAAGF,cAAc,CAACC,OAAf,CAAuB,QAAvB,CAAxB;AAEA,MAAIH,QAAJ;;AACA,MAAIC,SAAS,IAAI,KAAjB,EAAwB;AACpBD,IAAAA,QAAQ,GAAGD,aAAX;AAEH,GAHD,MAGO;AACHC,IAAAA,QAAQ,GAAGD,aAAa,CAACM,MAAd,CAAsBC,MAAD,IAAY;AACxC,aAAOA,MAAM,CAACC,EAAP,IAAaC,QAAQ,CAACJ,eAAD,CAA5B;AACH,KAFU,CAAX;AAGH;;AAGD,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,CAAC,CAAF,CAAxC;AACA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,EAAD,CAA5C,CAjB6B,CAoB7B;;AACA,QAAMoB,kBAAkB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5C,QAAIA,QAAQ,IAAI,IAAhB,EAAsB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAL,MAAAA,WAAW,CAACK,QAAQ,CAACR,EAAV,CAAX;AACAT,MAAAA,KAAK,CAACY,WAAN,CAAkBK,QAAQ,CAACR,EAA3B;AACAK,MAAAA,aAAa,CAAC,aAAaG,QAAQ,CAACG,WAAvB,CAAb;AACH;AACJ,GAPD;;AAUA,sBAGI,QAAC,YAAD;AAEI,IAAA,EAAE,EAAC,gBAFP;AAGI,IAAA,QAAQ,MAHZ;AAII,IAAA,OAAO,EAAElB,QAJb;AAKI,IAAA,cAAc,EAAEA,QAAQ,IAAKA,QAAQ,CAACkB,WAL1C;AAMI,IAAA,QAAQ,EAAEL,kBANd;AAOI,IAAA,WAAW,EAAEM,MAAM,iBAAK,QAAC,SAAD,OACZA,MADY;AAEhB,MAAA,KAAK,EAAC,iBAFU;AAGhB,MAAA,SAAS;AAHO;AAAA;AAAA;AAAA;AAAA;AAP5B;AAAA;AAAA;AAAA;AAAA,UAHJ;AAmBH;;GAlDQtB,gB;;KAAAA,gB;AAoDT,eAAeA,gBAAf","sourcesContent":["import {useState} from 'react';\r\nimport React from \"react\";\r\n\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\nfunction BranchSearchList(props) {\r\n    const branches_prop = props.branches;\r\n    const user_type = sessionStorage.getItem('app_type')\r\n    const app_user_branch = sessionStorage.getItem('branch')\r\n\r\n    let branches;\r\n    if (user_type == '101') {\r\n        branches = branches_prop\r\n\r\n    } else {\r\n        branches = branches_prop.filter((branch) => {\r\n            return branch.id != parseInt(app_user_branch)\r\n        })\r\n    }\r\n\r\n\r\n    const [branchId, setBranchId] = useState(-1);\r\n    const [branchname, setBranchName] = useState('');\r\n\r\n\r\n    //users auto complete\r\n    const handleAutocomplete = (event, newValue) => {\r\n        if (newValue != null) {\r\n            console.log(newValue)\r\n            setBranchId(newValue.id);\r\n            props.setBranchId(newValue.id)\r\n            setBranchName('Branch: ' + newValue.branch_name);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n\r\n        <Autocomplete\r\n\r\n            id=\"free-solo-demo\"\r\n            freeSolo\r\n            options={branches}\r\n            getOptionLabel={branches => (branches.branch_name)}\r\n            onChange={handleAutocomplete}\r\n            renderInput={params => (<TextField\r\n                    {...params}\r\n                    label=\"Branch sales...\"\r\n                    fullWidth/>\r\n            )}\r\n        />\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default BranchSearchList;"]},"metadata":{},"sourceType":"module"}